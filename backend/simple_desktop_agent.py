#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π desktop –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ screenshot –∑–∞–¥–∞—á –±–µ–∑ coact_client.
–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ backend —á–µ—Ä–µ–∑ WebSocket –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç screenshot –∑–∞–¥–∞—á–∏.
"""

import asyncio
import json
import websockets
import uuid
import os
import tempfile
import aiohttp
from datetime import datetime, timezone
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º embedded desktop environment
import sys
sys.path.append('/Users/egorandreevich/_Dev/Work/Skygen-Repos/skygen-web/backend')
from desktop_env.embedded.env import EmbeddedDesktopEnv

class SimpleDesktopAgent:
    def __init__(self, backend_ws_url: str, device_token: str):
        self.backend_ws_url = backend_ws_url
        self.device_token = device_token
        self.desktop_env = EmbeddedDesktopEnv()
        self.websocket = None
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend WebSocket"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å device token
            ws_url = f"{self.backend_ws_url}/v1/ws/agent?token={self.device_token}"
            print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {ws_url}")
            
            self.websocket = await websockets.connect(ws_url)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ backend WebSocket!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def handle_task(self, task_envelope: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–π –∑–∞–¥–∞—á–∏"""
        try:
            task_id = task_envelope.get("task_id")
            actions = task_envelope.get("actions", [])
            
            print(f"üìã –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id} —Å {len(actions)} –¥–µ–π—Å—Ç–≤–∏—è–º–∏")
            
            results = []
            for action in actions:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
                action_type = action.get("type") or action.get("action_type")
                
                print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                print(f"üìù –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
                
                if action_type == "screenshot":
                    print("üì∏ –í—ã–ø–æ–ª–Ω—è—é screenshot...")
                    result = await self.take_screenshot_and_upload(task_id)
                    results.append({
                        "action_id": action.get("action_id"),
                        "action_type": action_type,
                        "status": "completed",
                        "result": result
                    })
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
                    results.append({
                        "action_id": action.get("action_id"),
                        "action_type": action_type,
                        "status": "failed",
                        "error": f"Unknown action type: {action_type}"
                    })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
            response = {
                "type": "task.result",
                "task_id": task_id,
                "status": "completed",
                "completed_at": datetime.now(timezone.utc).isoformat(),
                "results": results
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
            for result in results:
                if result.get("action_type") == "screenshot" and "result" in result:
                    screenshot_path = result["result"].get("screenshot_path")
                    if screenshot_path:
                        response["screenshot_path"] = screenshot_path
                        print(f"üìé –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É –≤ –æ—Ç–≤–µ—Ç: {screenshot_path}")
            
            await self.websocket.send(json.dumps(response))
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ {task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –ï—Å–ª–∏ —ç—Ç–æ screenshot, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for result in results:
                if result.get("action_type") == "screenshot" and "result" in result:
                    screenshot_path = result["result"].get("screenshot_path")
                    if screenshot_path:
                        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ: {screenshot_path}")
                        await self.store_screenshot_info(task_id, screenshot_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    async def take_screenshot(self) -> Dict[str, Any]:
        """–î–µ–ª–∞–µ—Ç screenshot —á–µ—Ä–µ–∑ embedded desktop environment"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º screenshot –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG bytes
            screenshot_bytes = self.desktop_env.screenshot_png_bytes()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp_file:
                tmp_file.write(screenshot_bytes)
                screenshot_path = tmp_file.name
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ —ç–∫—Ä–∞–Ω–∞
            screen_size = self.desktop_env.screen_size()
            cursor_pos = self.desktop_env.cursor_position()
            
            print(f"üì∏ Screenshot —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
            print(f"üìè –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {screen_size[0]}x{screen_size[1]}")
            print(f"üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞: {cursor_pos}")
            
            return {
                "screenshot_path": screenshot_path,
                "screenshot_size_bytes": len(screenshot_bytes),
                "screen_size": screen_size,
                "cursor_position": cursor_pos,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ screenshot: {e}")
            raise
    
    async def take_screenshot_and_upload(self, task_id: str) -> Dict[str, Any]:
        """–î–µ–ª–∞–µ—Ç screenshot –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ S3"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π screenshot
            screenshot_result = await self.take_screenshot()
            local_path = screenshot_result["screenshot_path"]
            
            print(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞—é screenshot –≤ S3...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 —á–µ—Ä–µ–∑ artifacts endpoint
            s3_url = await self.upload_to_s3(local_path, task_id)
            
            if s3_url:
                print(f"‚úÖ Screenshot –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: {s3_url}")
                # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                try:
                    os.remove(local_path)
                    print(f"üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {local_path}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {e}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å S3 URL
                screenshot_result["s3_url"] = s3_url
                screenshot_result["screenshot_path"] = s3_url  # –ó–∞–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –Ω–∞ S3 URL
                return screenshot_result
            else:
                print(f"‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3 –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
                return screenshot_result
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ screenshot –∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            raise
    
    async def upload_to_s3(self, file_path: str, task_id: str) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ S3 —á–µ—Ä–µ–∑ artifacts API"""
        try:
            backend_base_url = self.backend_ws_url.replace("ws://", "http://").replace("wss://", "https://")
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞  
            filename = f"screenshot_{task_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            
            async with aiohttp.ClientSession() as session:
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                with open(file_path, 'rb') as f:
                    file_content = f.read()
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è multipart/form-data
                data = aiohttp.FormData()
                data.add_field('file', file_content, filename=filename, content_type='image/png')
                data.add_field('filename', filename)
                data.add_field('content_type', 'image/png')
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                upload_url = f"{backend_base_url}/v1/artifacts/upload-temp"
                print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –Ω–∞ {upload_url}")
                
                # –†–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ MinIO
                response = await session.post(upload_url, data=data)
                
                if response.status == 200:
                    result = await response.json()
                    minio_url = result['url']
                    print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ MinIO: {minio_url}")
                    return minio_url
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status} - {error_text}")
                    return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {e}")
            return None
    
    async def store_screenshot_info(self, task_id: str, screenshot_path: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤ backend –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ device_token (—ç—Ç–æ JWT —Å device_id)
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω
            headers = {
                "Authorization": f"Bearer {self.device_token}",
                "Content-Type": "application/json"
            }
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å aiohttp
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {screenshot_path}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ: {e}")
    
    async def listen_for_tasks(self):
        """–°–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç backend"""
        try:
            print("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
            async for message in self.websocket:
                try:
                    data = json.loads(message)
                    message_type = data.get("type")
                    
                    if message_type == "task.exec":
                        await self.handle_task(data)
                    else:
                        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {message_type}")
                        
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞"""
        if await self.connect():
            await self.listen_for_tasks()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Simple Desktop Agent...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    BACKEND_WS_URL = "ws://localhost:8000"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π device_token
    DEVICE_TOKEN = "eyJhbGciOiJIUzI1NiIsImtpZCI6InYxIiwidHlwIjoiSldUIn0.eyJkZXZpY2VfaWQiOiIxNDRlYTY4ZC1kZDcwLTRhZTEtYjc2Mi1jY2E1MGVlN2I0NTciLCJqdGkiOiJlNDVlMjU2Yjc5YzI0MmRlODY5ZmE1OTk0ZDc0Y2E1MyIsImV4cCI6MTc1NzY5MDU1NywiaWF0IjoxNzU3NjA0MTU3fQ.YPiJf5vIW1AVCHto7SOPLlAbI9A-L2vxnm380AfyNRs"
    
    agent = SimpleDesktopAgent(BACKEND_WS_URL, DEVICE_TOKEN)
    
    try:
        await agent.run()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞...")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ macOS
    import platform
    if platform.system() != "Darwin":
        print("‚ö†Ô∏è –≠—Ç–æ—Ç –∞–≥–µ–Ω—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ macOS")
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
