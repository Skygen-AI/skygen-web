from __future__ import annotations

import uuid
import json
from typing import Annotated
from datetime import datetime

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db import get_db
from app.deps import get_current_user
from app.models import User, ChatSession, ChatMessage, Device, Task
from app.schemas import AgentChatRequest, AgentChatResponse, ChatMessageResponse
from app.clients import publish_event
from loguru import logger

router = APIRouter()

# –ü—Ä–æ—Å—Ç–æ–π AI –∞–≥–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏


class SimpleAgent:
    """–ü—Ä–æ—Å—Ç–æ–π AI –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""

    @staticmethod
    def should_create_task(message: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        task_keywords = [
            "screenshot", "—Å–∫—Ä–∏–Ω—à–æ—Ç", "—Å–∫—Ä–∏–Ω", "—Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞",
            "click", "–∫–ª–∏–∫–Ω–∏", "–Ω–∞–∂–º–∏", "–∫–ª–∏–∫",
            "type", "–Ω–∞–ø–µ—á–∞—Ç–∞–π", "–≤–≤–µ–¥–∏", "–Ω–∞–±–µ—Ä–∏",
            "open", "–æ—Ç–∫—Ä–æ–π", "–∑–∞–ø—É—Å—Ç–∏",
            "close", "–∑–∞–∫—Ä–æ–π",
            "find", "–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫",
            "scroll", "–ø—Ä–æ–∫—Ä—É—Ç–∏", "—Å–∫—Ä–æ–ª–ª",
            "task", "–∑–∞–¥–∞—á–∞", "–≤—ã–ø–æ–ª–Ω–∏", "—Å–¥–µ–ª–∞–π"
        ]

        message_lower = message.lower()
        return any(keyword in message_lower for keyword in task_keywords)

    @staticmethod
    def parse_task_from_message(message: str, device_id: uuid.UUID) -> dict:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–¥–∞—á–∏"""
        message_lower = message.lower()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ["screenshot", "—Å–∫—Ä–∏–Ω—à–æ—Ç", "—Å–∫—Ä–∏–Ω", "—Å–Ω–∏–º–æ–∫"]):
            action_type = "screenshot"
            actions = [{
                "action_id": str(uuid.uuid4()),
                "type": "screenshot",
                "params": {}
            }]
            title = "Take Screenshot"
            description = f"Taking screenshot as requested: {message}"

        elif any(word in message_lower for word in ["click", "–∫–ª–∏–∫–Ω–∏", "–Ω–∞–∂–º–∏"]):
            action_type = "click"
            actions = [{
                "action_id": str(uuid.uuid4()),
                "type": "execute_action",
                "params": {
                    "action": {
                        "action_type": "CLICK",
                        "x": 500,  # Default position
                        "y": 300
                    }
                }
            }]
            title = "Click Action"
            description = f"Performing click action: {message}"

        elif any(word in message_lower for word in ["type", "–Ω–∞–ø–µ—á–∞—Ç–∞–π", "–≤–≤–µ–¥–∏"]):
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞
            text_to_type = message
            if "–Ω–∞–ø–µ—á–∞—Ç–∞–π" in message_lower:
                text_to_type = message.split("–Ω–∞–ø–µ—á–∞—Ç–∞–π", 1)[-1].strip()
            elif "–≤–≤–µ–¥–∏" in message_lower:
                text_to_type = message.split("–≤–≤–µ–¥–∏", 1)[-1].strip()
            elif "type" in message_lower:
                text_to_type = message.split("type", 1)[-1].strip()

            action_type = "type_text"
            actions = [{
                "action_id": str(uuid.uuid4()),
                "type": "type_text",
                "params": {
                    "text": text_to_type
                }
            }]
            title = "Type Text"
            description = f"Typing text: {text_to_type}"

        else:
            # –û–±—â–∞—è –∑–∞–¥–∞—á–∞
            action_type = "general"
            actions = [{
                "action_id": str(uuid.uuid4()),
                "type": "screenshot",
                "params": {}
            }]
            title = "General Task"
            description = f"Processing request: {message}"

        return {
            "title": title,
            "description": description,
            "actions": actions,
            "metadata": {
                "source": "chat",
                "original_message": message,
                "action_type": action_type
            }
        }

    @staticmethod
    def generate_response(message: str, task_created: bool = False, task_id: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞"""
        if task_created:
            return f"–ü–æ–Ω—è–ª! –Ø —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ó–∞–¥–∞—á–∞ #{task_id} –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."

        message_lower = message.lower()

        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi"]):
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º, —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –∫–ª–∏–∫–∞–º–∏, –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!"

        elif any(word in message_lower for word in ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å"]):
            return """–Ø —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:

üñ•Ô∏è **–°–∫—Ä–∏–Ω—à–æ—Ç—ã**: "–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç", "screenshot"
üñ±Ô∏è **–ö–ª–∏–∫–∏**: "–ö–ª–∏–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", "click at position"  
‚å®Ô∏è **–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞**: "–ù–∞–ø–µ—á–∞—Ç–∞–π 'Hello World'", "type some text"
ü™ü **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏**: "–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–∑–∞–∫—Ä–æ–π –æ–∫–Ω–æ"
üîç **–ü–æ–∏—Å–∫**: "–ù–∞–π–¥–∏ —Ñ–∞–π–ª", "find element"

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ —è —Å–æ–∑–¥–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É!"""

        elif any(word in message_lower for word in ["—Å–ø–∞—Å–∏–±–æ", "thanks", "thank you"]):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –µ—â–µ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ!"

        else:
            return "–Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, —è —Å–æ–∑–¥–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É. –ò–Ω–∞—á–µ, —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å."


@router.post("/chat", response_model=AgentChatResponse)
async def agent_chat(
    payload: AgentChatRequest,
    current_user: Annotated[User, Depends(get_current_user)],
    db: Annotated[AsyncSession, Depends(get_db)],
) -> AgentChatResponse:
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI –∞–≥–µ–Ω—Ç–æ–º"""

    session_id = payload.session_id
    device_id = payload.device_id

    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if not session_id:
        session = ChatSession(
            user_id=current_user.id,
            device_id=device_id,
            title=f"Chat {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            metadata={"created_by": "agent_api"}
        )
        db.add(session)
        await db.flush()
        session_id = session.id
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        session_result = await db.execute(
            select(ChatSession).where(
                ChatSession.id == session_id,
                ChatSession.user_id == current_user.id
            )
        )
        session = session_result.scalar_one_or_none()
        if not session:
            raise HTTPException(
                status_code=404, detail="Chat session not found")

        # –û–±–Ω–æ–≤–ª—è–µ–º device_id –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if device_id and session.device_id != device_id:
            session.device_id = device_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if device_id:
        device_result = await db.execute(
            select(Device).where(
                Device.id == device_id,
                Device.user_id == current_user.id
            )
        )
        device = device_result.scalar_one_or_none()
        if not device:
            raise HTTPException(status_code=404, detail="Device not found")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = ChatMessage(
        session_id=session_id,
        role="user",
        content=payload.message,
        meta_data=payload.metadata
    )
    db.add(user_message)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á—É
    agent = SimpleAgent()
    should_create_task = agent.should_create_task(payload.message)
    task_created = False
    task_id = None

    if should_create_task and device_id:
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task_data = agent.parse_task_from_message(
                payload.message, device_id)

            task_id = f"task_{uuid.uuid4().hex[:8]}"
            task = Task(
                id=task_id,
                user_id=current_user.id,
                device_id=device_id,
                title=task_data["title"],
                description=task_data["description"],
                payload={
                    "actions": task_data["actions"],
                    "metadata": task_data["metadata"]
                }
            )

            db.add(task)
            await db.flush()

            # –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
            user_message.task_id = task_id
            task_created = True

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            try:
                await publish_event(f"deliver:task:{device_id}", {
                    "task_id": task_id,
                    "device_id": str(device_id),
                    "user_id": str(current_user.id)
                })
                logger.info(f"Published task {task_id} for device {device_id}")
            except Exception as e:
                logger.warning(f"Failed to publish task event: {e}")

        except Exception as e:
            logger.error(f"Failed to create task: {e}")
            should_create_task = False

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    assistant_response = agent.generate_response(
        payload.message,
        task_created=task_created,
        task_id=task_id
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    assistant_message = ChatMessage(
        session_id=session_id,
        role="assistant",
        content=assistant_response,
        metadata={
            "task_created": task_created,
            "task_id": task_id,
            "generated_by": "simple_agent"
        }
    )
    db.add(assistant_message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
    session.updated_at = datetime.utcnow()

    await db.commit()
    await db.refresh(user_message)
    await db.refresh(assistant_message)

    return AgentChatResponse(
        session_id=session_id,
        message=ChatMessageResponse(
            id=user_message.id,
            session_id=user_message.session_id,
            role=user_message.role,
            content=user_message.content,
            created_at=user_message.created_at,
            metadata=user_message.meta_data,
            task_id=user_message.task_id,
        ),
        assistant_message=ChatMessageResponse(
            id=assistant_message.id,
            session_id=assistant_message.session_id,
            role=assistant_message.role,
            content=assistant_message.content,
            created_at=assistant_message.created_at,
            metadata=assistant_message.meta_data,
            task_id=None,
        ),
        task_created=task_created,
        task_id=task_id,
    )


@router.get("/capabilities")
async def get_agent_capabilities(
    current_user: Annotated[User, Depends(get_current_user)],
) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞–≥–µ–Ω—Ç–∞"""

    return {
        "capabilities": [
            {
                "name": "screenshot",
                "description": "Take screenshots of the desktop",
                "keywords": ["screenshot", "—Å–∫—Ä–∏–Ω—à–æ—Ç", "—Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞"],
                "example": "–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
            },
            {
                "name": "click",
                "description": "Click at specific coordinates or elements",
                "keywords": ["click", "–∫–ª–∏–∫–Ω–∏", "–Ω–∞–∂–º–∏", "–∫–ª–∏–∫"],
                "example": "–ö–ª–∏–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É"
            },
            {
                "name": "type_text",
                "description": "Type text using keyboard",
                "keywords": ["type", "–Ω–∞–ø–µ—á–∞—Ç–∞–π", "–≤–≤–µ–¥–∏", "–Ω–∞–±–µ—Ä–∏"],
                "example": "–ù–∞–ø–µ—á–∞—Ç–∞–π 'Hello World'"
            },
            {
                "name": "window_management",
                "description": "Open, close, and manage application windows",
                "keywords": ["open", "close", "–æ—Ç–∫—Ä–æ–π", "–∑–∞–∫—Ä–æ–π"],
                "example": "–û—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä"
            },
            {
                "name": "search",
                "description": "Find files, applications, or elements",
                "keywords": ["find", "–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫"],
                "example": "–ù–∞–π–¥–∏ —Ñ–∞–π–ª document.pdf"
            }
        ],
        "supported_languages": ["ru", "en"],
        "version": "1.0.0",
        "agent_type": "simple_rule_based"
    }
