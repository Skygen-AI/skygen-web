import { websocketService } from './websocketService';

export interface User {
    id: string;
    email: string;
}

export interface LoginResponse {
    access_token: string;
    refresh_token: string;
    token_type: string;
}

export interface AuthError {
    detail: string;
}

/**
 * Real Auth Service - –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –±—ç–∫–µ–Ω–¥—É
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏–ª–∏ –∫–æ–≥–¥–∞ DEV_MODE –æ—Ç–∫–ª—é—á–µ–Ω
 */
export class AuthService {
    private static instance: AuthService;
    private backendUrl: string = 'http://localhost:8000';

    public static getInstance(): AuthService {
        if (!AuthService.instance) {
            AuthService.instance = new AuthService();
        }
        return AuthService.instance;
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async signup(email: string, password: string): Promise<User> {
        const response = await fetch(`${this.backendUrl}/v1/auth/signup`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                email,
                password,
            }),
        });

        if (!response.ok) {
            const errorData: AuthError = await response.json();
            throw new Error(errorData.detail || 'Registration failed');
        }

        const user: User = await response.json();
        return user;
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async login(email: string, password: string): Promise<LoginResponse> {
        const response = await fetch(`${this.backendUrl}/v1/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                email,
                password,
            }),
        });

        if (!response.ok) {
            const errorData: AuthError = await response.json();
            throw new Error(errorData.detail || 'Login failed');
        }

        const loginData: LoginResponse = await response.json();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ localStorage
        if (typeof window !== 'undefined') {
            localStorage.setItem('access_token', loginData.access_token);
            localStorage.setItem('refresh_token', loginData.refresh_token);
        }

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        try {
            await websocketService.connect(loginData.access_token);
            console.log('WebSocket connected successfully');
        } catch (error) {
            console.error('Failed to connect WebSocket:', error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω –µ—Å–ª–∏ WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è
        }

        return loginData;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isAuthenticated(): boolean {
        if (typeof window === 'undefined') return false;
        return !!localStorage.getItem('access_token');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
     */
    getAccessToken(): string | null {
        if (typeof window === 'undefined') return null;
        return localStorage.getItem('access_token');
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    logout(): void {
        if (typeof window === 'undefined') return;
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
    }

    /**
     * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
     */
    async signupAndLogin(email: string, password: string): Promise<{
        user: User;
        tokens: LoginResponse;
    }> {
        // –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
        const user = await this.signup(email, password);
        
        // –ó–∞—Ç–µ–º –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        const tokens = await this.login(email, password);

        return { user, tokens };
    }
}

// ============================================
// Conditional Export: Mock vs Real Service
// ============================================
// –í DEV —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock-—Å–µ—Ä–≤–∏—Å (–±–µ–∑ –±—ç–∫–µ–Ω–¥–∞)
// –í PROD —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
// 
// –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ === 'true'
// –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è undefined) = PROD —Ä–µ–∂–∏–º
import { MockAuthService } from './authService.mock';

const isDev = process.env.NEXT_PUBLIC_DEV_MODE === 'true';

// –í dev-—Ä–µ–∂–∏–º–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º mock, –∏–Ω–∞—á–µ - —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
export const authService = isDev 
    ? MockAuthService.getInstance()
    : AuthService.getInstance();

// –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
if (typeof window !== 'undefined') {
    console.log(
        `[AuthService] Mode: ${isDev ? 'üîß DEV (Mock)' : 'üöÄ PRODUCTION (Real Backend)'}`
    );
}
